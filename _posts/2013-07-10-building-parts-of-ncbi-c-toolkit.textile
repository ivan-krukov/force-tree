---
layout: post
title: "Building parts of NCBI C++ toolkit"
description: ""
category: 
tags: []
---
{% include JB/setup %}

h3. Intro

"NCBI C++ toolkit":toolkit is a large collection of libraries and software for bioinformatics. There is tons of great stuff in there, most notably "BLAST":blast, _the_ search engine of bioinformatics. (If you are looking for BLAST, it is distributed as a separate package "here":blast_source). Besides BLAST, there are a lot of useful tools in the box, as described in the "book":book.

Of particular interest to me is "SPLIGN":splign, a tool for spliced sequence alignments. To cut the long story short, the algorithm accurately predicts splice sites in cDNA-to-gene alignments. This tool is extensively used for gene prediction inside NCBI. My goal is similar.

h3. Building

The toolkit is a rather large affair, and if you compile the whole thing, you can easily run beyond 20GB of space. While you can do everything, it is desirable to only build a small subset of the codebase.

I am building on my laptop running Linux x64 (kernel 3.9.9-1 ARCH). I have downloaded "this":source version of the toolkit (12.0.0, June 13, 2013)

There are fairly detailed instructions in the "book":book about customizing the build process. However, there is a fast and easy way to build predefined projects. It was kindly recommended to me by Aaron Ucko of NCBI. The idea is to create a flat makefile that has separate build procedures for the predefined projects, SPLIGN among them. This also takes care of compiling all the dependencies for the particular application.

{% highlight sh %}
./configure --without-debug --with-flat-makefile
{% endhighlight %}

The above will compile the core and create the flat makefile. Of course, other @configure@ flags are applicable. In my case I added @--with-64@ and @--with-mt@. Note that this will take some time.After this is done, go to the relase build directory.


{% highlight sh %}
cd GCC*-Release*/build
{% endhighlight %}

You can now look at what projects are available as standalone executables. 


{% highlight sh %}
grep "*.exe" Makefile.flat
{% endhighlight %}

The @exe@ stands for executable, and has very little to do with Windows. Once you know what you want to build, do it like so:


{% highlight sh %}
make -f Makefile.flat splign.exe
{% endhighlight %}

Once more, this will take a little bit of time, but should be done reasonably quick. Once it is complete, you will have a SPLIGN executable. Move it into your @$PATH@. Happy spliced-aligning!

[toolkit]http://www.ncbi.nlm.nih.gov/IEB/ToolBox/CPP_DOC
[book]http://www.ncbi.nlm.nih.gov/books/NBK7160/
[blast]http://blast.ncbi.nlm.nih.gov/
[blast_source]http://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download
[splign]http://www.ncbi.nlm.nih.gov/sutils/splign/splign.cgi
[source]ftp://ftp.ncbi.nih.gov/toolbox/ncbi_tools++/CURRENT/ncbi_cxx--12_0_0.tar.gz
